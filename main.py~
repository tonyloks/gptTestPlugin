from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
import os
import json

app = FastAPI()


def ensure_well_known_folder(directory_path: str):
    """
    Проверяет, существует ли папка .well-known.
    Если нет — создаёт её.
    """
    if not os.path.exists(directory_path):
        try:
            os.makedirs(directory_path)
            print(f"[DEBUG] Папка '{directory_path}' успешно создана.")
        except Exception as e:
            print(f"[ERROR] Ошибка при создании папки '{directory_path}': {e}")
    else:
        print(f"[DEBUG] Папка '{directory_path}' уже существует.")

    # Дополнительно проверяем права чтения
    can_read = os.access(directory_path, os.R_OK)
    print(f"[DEBUG] Папка доступна для чтения? {can_read}")


def ensure_ai_plugin_file(directory_path: str):
    """
    Проверяет, существует ли файл ai-plugin.json в папке directory_path.
    Если нет — создаёт базовый файл с примерным JSON-содержимым.
    """
    file_path = os.path.join(directory_path, "ai-plugin.json")
    print(f"[DEBUG] Путь к файлу ai-plugin.json: {file_path}")

    if not os.path.exists(file_path):
        print("[DEBUG] Файл ai-plugin.json не найден. Создаём новый...")
        # Пример базового содержимого JSON
        default_content = {
            "schema_version": "v1",
            "name_for_human": "YouTube Summary Plugin",
            "name_for_model": "youtube_summary",
            "description_for_human": "Коротко пересказывает содержание YouTube-видео",
            "description_for_model": "Получает YouTube URL, извлекает транскрипт, возвращает summary",
            "auth": {"type": "none"},
            "api": {
                "type": "openapi",
                "url": "https://yourdomain.com/openapi.json",
                "is_user_authenticated": False
            },
            "logo_url": "https://yourdomain.com/logo.png",
            "contact_email": "support@example.com",
            "legal_info_url": "https://yourdomain.com/legal"
        }
        try:
            with open(file_path, "w", encoding="utf-8") as f:
                json.dump(default_content, f, ensure_ascii=False, indent=2)
            print("[DEBUG] Файл ai-plugin.json создан.")
        except Exception as e:
            print(f"[ERROR] Не удалось создать ai-plugin.json: {e}")
    else:
        print("[DEBUG] Файл ai-plugin.json уже существует.")

    # Проверим содержимое файла
    if os.path.exists(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                content = f.read()
            print("[DEBUG] Содержимое ai-plugin.json:\n", content)
        except Exception as e:
            print(f"[ERROR] Не удалось прочитать ai-plugin.json: {e}")


def setup_well_known_folder(app: FastAPI):
    """
    Выполняет все необходимые действия по созданию .well-known
    и монтированию в FastAPI как статические файлы.
    """
    # Путь к папке .well-known (в одной директории с этим скриптом)
    directory_path = os.path.join(os.path.dirname(__file__), ".well-known")

    ensure_well_known_folder(directory_path)
    ensure_ai_plugin_file(directory_path)

    # Монтируем папку как статические файлы
    app.mount(
        "/.well-known",
        StaticFiles(directory=directory_path),
        name="well-known"
    )
    return directory_path


# --- вызываем настройку ---
directory_path = setup_well_known_folder(app)
print("[INFO] Сервис настроен. Путь к .well-known:", directory_path)


from pydantic import BaseModel

class SummaryRequest(BaseModel):
    youtube_url: str

class SummaryResponse(BaseModel):
    summary: str

@app.post("/summary", response_model=SummaryResponse)
def get_summary(request: SummaryRequest):
    """
    Возвращает краткое содержание ролика по ссылке на YouTube.
    """
    youtube_url = request.youtube_url

    import re
    match = re.search(r"v=([^&]+)", youtube_url)
    if not match:
        return {"summary": "Не удалось найти ID видео в ссылке"}

    video_id = match.group(1)

    from youtube_transcript_api import YouTubeTranscriptApi
    try:
        transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=['ru', 'en'])
    except Exception as e:
        return {"summary": f"Ошибка при получении транскрипта: {str(e)}"}

    full_text = " ".join([item['text'] for item in transcript])

    # Пример простого сокращения
    words = full_text.split()
    summary = " ".join(words[:100]) + "..." if len(words) > 100 else full_text

    return {"summary": summary}
